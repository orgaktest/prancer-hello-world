# This is the workflow to run the collections when the git repository is non-routable, i.e not accessible on the internet

name: NonRoutableRemoteRun

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      name:
        description: 'Collecion Name'
        default: 'scenario_aws_terraform_remote'
      environment:
        type: choice
        description: Run environment
        options:
        - PROD
        - QA
      company:
        type: choice
        description: Tenant
        options:
        - htc
        - john

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run the non-routable remote run script
        run: |
          curl -L -o /usr/local/bin/opa https://openpolicyagent.org/downloads/v0.36.1/opa_linux_amd64_static
          chmod 755 /usr/local/bin/opa
          echo "opa binary path..."
          which opa
          echo "helm binary path..."
          which helm
          python3 -m venv helloenv
          echo "" >> config.ini
          echo "[OPA]" >> config.ini
          echo "opa = true" >> config.ini
          echo "opaexe = /usr/local/bin/opa" >> config.ini
          echo "" >> config.ini
          echo "[HELM]" >> config.ini
          echo "helmexe = /usr/local/bin/helm" >> config.ini
          cat config.ini
          source helloenv/bin/activate
          pip install -U pip
          pip install -U prancer-basic
          prancer -v
          envval='${{ github.event.inputs.environment }}'
          tenant='${{ github.event.inputs.company }}'
          collection='${{ github.event.inputs.name }}'
          apikey="${HTCAPIKEY}"
          gittoken="${GITTOKEN}"
          if [ "$envval" != "QA" ]; then
              prancer --db REMOTE --apitoken $apikey --gittoken $gittoken --company prancer-$tenant $collection
          else
              prancer --db REMOTE --env QA --apitoken $apikey --gittoken $gittoken --company prancer-$tenant $collection
          fi
        env:
          APIKEY: ${{ secrets.APIKEY }}
          GITTOKEN: ${{ secrets.GITTOKEN }}
  
